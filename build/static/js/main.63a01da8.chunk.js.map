{"version":3,"sources":["Display.jsx","DrumSounds.js","Drum_Pad.js","DrumMachineBody.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","react_default","a","createElement","className","id","value","availableKeys","Q","name","source","W","E","A","S","D","Z","X","C","Drum_Pad","drumName","drumSource","onClick","style","type","src","DrumMachineBody","Fragment","Row","noGutters","Col","xs","Drum_Pad_Drum_Pad","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buttonOnClick","e","setState","screenValue","target","children","play","handleKeyPress","keyUpper","key","toUpperCase","keyValue","document","getElementById","state","script","async","body","appendChild","Container","onKeyPress","height","md","size","offset","Display_Display","DrumMachineBody_DrumMachineBody","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63a01da8.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Display = props => {\n    return <div className=\"screen\" id=\"display\">{props.value}</div>\n}","\n\nexport const availableKeys = {\n    Q:{name:'Heater-1', source:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"},\n    W:{name:'Heater-2', source:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"},\n    E:{name:'Heater-3', source:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"},\n    A:{name:'Heater-4', source:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"},\n    S:{name:'Clap', source:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"}, \n    D:{name:'Open-HH', source:\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"}, \n    Z:{name:\"Kick-n'-Hat\", source:\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"}, \n    X:{name:'Kick', source:\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"},\n    C:{name:'Closed-HH', source:\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"}\n};\n","import React from 'react';\nimport {availableKeys} from './DrumSounds';\n\n\nexport const Drum_Pad = props => {\n    const drumName = availableKeys[props.value].name;\n    const drumSource = availableKeys[props.value].source;\n    return <button className=\"drum-pad\" onClick={props.onClick} id={drumName} value={props.value} style={props.style}>\n            {props.value}\n            <audio className=\"clip\" id={props.value} type=\"audio/mpeg\" src={drumSource}/>\n        </button>\n}  \n","import React from 'react';\nimport {Row, Col} from 'reactstrap';\nimport {Drum_Pad} from './Drum_Pad';\n\nexport const DrumMachineBody = props => {\n    //create a grid for all numbers\n    return <>\n            <Row noGutters>\n                <Col>\n                    <Row noGutters> \n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"Q\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"W\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"E\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                    <Row noGutters>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"A\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"S\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"D\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                    <Row noGutters>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"Z\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"X\" onClick={props.onClick} />\n                        </Col>\n                        <Col xs=\"4\">\n                            <Drum_Pad value=\"C\" onClick={props.onClick} />\n                        </Col>\n                    </Row>\n                </Col>\n            </Row> \n        </>\n}  \n","import React, { Component } from 'react';\nimport {Container, Row, Col} from 'reactstrap';\n//import logo from './logo.svg';\nimport './App.css';\nimport {Display} from './Display';\nimport {DrumMachineBody} from './DrumMachineBody';\nimport {availableKeys} from './DrumSounds';\n\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      screenValue: null,\n    };\n  }\n\n  componentDidMount () {\n    const script = document.createElement(\"script\");\n\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  buttonOnClick = e => {\n    this.setState({\n      screenValue: e.target.id\n    })\n    //play audio\n    e.target.children[e.target.value].play()\n  }\n\n  handleKeyPress = e => {\n    const keyUpper = e.key.toUpperCase();\n    const keyValue = availableKeys[keyUpper];\n    if(keyValue){\n      this.setState({\n        screenValue: keyValue.name\n      })\n      //play audio\n      document.getElementById(keyValue.name).children[keyUpper].play();\n    }\n  }\n  \n  render() {\n    return (\n        <Container className=\"App\" id=\"drum-machine\" onKeyPress={this.handleKeyPress}>\n              <Row style={{height:30}}/>\n              <Row>\n                <Col md={{ size: 4, offset: 4 }}>\n                  <Display value={this.state.screenValue}/>\n                </Col>\n              </Row>\n              <Row>\n                <Col md={{ size: 4, offset: 4 }}>\n                  <DrumMachineBody onClick={this.buttonOnClick}/>\n                </Col>\n              </Row>\n        </Container>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}